What happens when you initialize a repository? Why do you need to do it? 
: there will be zero commit initially. We need to do this to change the normal directory into git repository so that we can track commit histories & perform version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers? 
: I'd like to add a commit to this repository. To specify exactly what to commit from the existing directory, Git uses an intermediate area called "staging area". You add files to the staging area, and then when I'm ready to commit, Git bundles the entire contents of the staging area into a single commit and adds that to the repository.


How can you use the staging area to make sure you have one commit per logical
change?
: you can move all relevantly changed files to staging area and then commit! 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
: performing some independent experiments! you can always easily go back to the updated master version.

How do the diagrams help you visualize the branch structure?
: namely, we can view the nonlinear commit history (branch) in a more understandable manner.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
: it is actually merging! we combine the modifications that happened in different branches. 
So, it makes sense to "merge" the lines in the diagram.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
